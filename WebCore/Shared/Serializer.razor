@using System.Text;
@using System.Text.Json;
@using System.Text.Json.Serialization;

<SerializerGroup Title="IJSRuntime.InvokeAsync (c#) and JSON.stringify (js)" Text="@Via_IJSRuntime" />
<SerializerGroup Title="Newtonsoft.Json.JsonConvert" Text="@Via_JsonDotNet" />
<SerializerGroup Title="System.Text.Json.JsonSerializer" Text="@Via_Text_Json" />

@code {
[Parameter]
public object ObjectToSerialize { get; set; }

[Inject]
protected IJSRuntime JSRuntime { get; set; }

public string Via_IJSRuntime { get; set; }
public string Via_Text_Json { get; set; }
public string Via_JsonDotNet { get; set; }

protected override async Task OnInitAsync()
{
    Via_IJSRuntime = await ResultOrExceptionMessage(() => JSRuntime.InvokeAsync<string>("JSON.stringify", ObjectToSerialize));
    Via_JsonDotNet = ResultOrExceptionMessage(() => Newtonsoft.Json.JsonConvert.SerializeObject(ObjectToSerialize));
    Via_Text_Json = ResultOrExceptionMessage(() => JsonSerializer.Serialize(ObjectToSerialize));
    
    await base.OnInitAsync();
}

private string ResultOrExceptionMessage(Func<string> getResult)
{
    try
    {
        return getResult();
    }
    catch (Exception e)
    {
        return e.Message;
    }
}

private Task<string> ResultOrExceptionMessage(Func<Task<string>> getResult)
{
    try
    {
        return getResult();
    }
    catch (Exception e)
    {
        return Task.FromResult(e.Message);
    }
}
}
